// Code generated by moshi-kotlin-codegen. Do not edit.
package com.example.android.devbyteviewer.network

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonDataException
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.String

class NetworkVideoJsonAdapter(moshi: Moshi) : JsonAdapter<NetworkVideo>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("title", "description", "url", "updated", "thumbnail", "closedCaptions")

    private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java).nonNull()

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter(String::class.java).nullSafe()

    override fun toString(): String = "GeneratedJsonAdapter(NetworkVideo)"

    override fun fromJson(reader: JsonReader): NetworkVideo {
        var title: String? = null
        var description: String? = null
        var url: String? = null
        var updated: String? = null
        var thumbnail: String? = null
        var closedCaptions: String? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 -> title = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'title' was null at ${reader.path}")
                1 -> description = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'description' was null at ${reader.path}")
                2 -> url = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'url' was null at ${reader.path}")
                3 -> updated = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'updated' was null at ${reader.path}")
                4 -> thumbnail = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'thumbnail' was null at ${reader.path}")
                5 -> closedCaptions = nullableStringAdapter.fromJson(reader)
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = NetworkVideo(
                title = title ?: throw JsonDataException("Required property 'title' missing at ${reader.path}"),
                description = description ?: throw JsonDataException("Required property 'description' missing at ${reader.path}"),
                url = url ?: throw JsonDataException("Required property 'url' missing at ${reader.path}"),
                updated = updated ?: throw JsonDataException("Required property 'updated' missing at ${reader.path}"),
                thumbnail = thumbnail ?: throw JsonDataException("Required property 'thumbnail' missing at ${reader.path}"),
                closedCaptions = closedCaptions)
        return result
    }

    override fun toJson(writer: JsonWriter, value: NetworkVideo?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("title")
        stringAdapter.toJson(writer, value.title)
        writer.name("description")
        stringAdapter.toJson(writer, value.description)
        writer.name("url")
        stringAdapter.toJson(writer, value.url)
        writer.name("updated")
        stringAdapter.toJson(writer, value.updated)
        writer.name("thumbnail")
        stringAdapter.toJson(writer, value.thumbnail)
        writer.name("closedCaptions")
        nullableStringAdapter.toJson(writer, value.closedCaptions)
        writer.endObject()
    }
}
